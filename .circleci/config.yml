version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5
  browser-tools: circleci/browser-tools@1.4.3

common:
  restore_cache: &restore_cache
    restore_cache:
      keys:
        - maven-repo-v2-{{ .Branch }}-{{ checksum "pom.xml" }}
        - maven-repo-v2-{{ .Branch }}
        - maven-repo-v2-

  cypress_test_steps: &cypress_test_steps
    steps:
      - checkout
      - browser-tools/install-browser-tools:
          chrome-version: 116.0.5845.96 # TODO: remove when chromedriver downloads are fixed
      - run:
          command: |
            google-chrome --version
            chromedriver --version
            which google-chrome
          name: Check browser installed
      - *restore_cache
      - run:
          name: Docker compose
          command: |
            set +e  # Disable exit on error
            for i in $(seq 3); do
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin docker2-granite-release-local.dr-uw2.adobeitc.com
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin docker-adobe-cif-release.dr-uw2.adobeitc.com
              docker-compose -f .circleci/docker-compose.yml down -v
              docker-compose -f .circleci/docker-compose.yml up -d && break
              sleep 10  # Add a delay between retries
            done
            set -e  # Enable exit on error
      - attach_workspace:
          at: /home/circleci/build
      - run:
          name: Configure GIT
          command: |
            git config user.email "ci-build@aemforms"
            git config user.name "ci-build"
      - add_ssh_keys:
          fingerprints:
            - "cc:0f:09:fc:97:72:c5:12:2e:fb:ea:a0:a2:39:3c:64"
      - run:
          name: Install Chrome Launcher
          command: npm install chrome-launcher
      - run:
          name: Install lighthouse
          command: npm install lighthouse
      - run:
          name: Install Web Driver
          command: npm install selenium-webdriver
      - run:
          name: Install AXE Core/Webdriver
          command: npm install @axe-core/webdriverjs
      - run:
          name: Install AXE HTML Reporter
          command: npm install axe-html-reporter
      - run: docker ps -a
      - run:
          name: UI tests
          # Supports 'Re-run failed tests only'. See this for more info: https://circleci.com/docs/rerun-failed-tests-only/
          command: |
            cd ui.tests/test-module
            TESTFILES=$(circleci tests glob "specs/**/*.spec.js")
            cd ../../
            echo "false" >> TEST_EXECUTION_STATUS.txt
            echo $TESTFILES | circleci tests run --command="xargs node .circleci/ci/it-tests.js" --verbose --split-by=timings
      - store_test_results:
          path: ui.tests/test-module/test_results
      - run:
          name: Calculate lighthouse Scores
          command: |
            test_execution_status=$(cat TEST_EXECUTION_STATUS.txt)
            if [[ $test_execution_status == "true" ]]; then
              node .circleci/ci/lighthouse.js
            else
              echo "Skipping Lighthouse Scores calculation..."
            fi
      - run:
          name: Check Accessibility
          command: |
            test_execution_status=$(cat TEST_EXECUTION_STATUS.txt)
            if [[ $test_execution_status == "true" ]]; then
              node .circleci/ci/accessibility-axe.js
            else
              echo "Skipping Accessibility check..."
            fi
      - run:
          name: Stop CQ
          command: |
            test_execution_status=$(cat TEST_EXECUTION_STATUS.txt)
            if [[ $test_execution_status == "true" ]]; then
              node .circleci/ci/stop-cq.js
            else
              echo "Skipping stop cq ..."
            fi
      - run:
          name: Cleanup
          command: |
            rm -rf TEST_EXECUTION_STATUS.txt
      # Save test results as artifacts
      - store_artifacts:
          path: ui.tests/test-module/target
      # Save AEM logs as artifacts
      - store_artifacts:
          path: logs
      - store_artifacts:
          path: artifacts

  docker_auth: &docker_auth
    auth:
      username: $DOCKER_USER
      password: $DOCKER_PASS

executors:
  forms_executor:
    docker:
      - image: cimg/openjdk:11.0.16-browsers
  forms_executor_java8:
    docker:
      - image: cimg/openjdk:8.0-browsers
  test_executor_cloudready:
    machine:
      image: ubuntu-2204:2023.10.1
      docker_layer_caching: true

jobs:
  build-java-11:
    executor: forms_executor
    working_directory: /home/circleci/build
    steps:
      - checkout
      - restore_cache:
          keys:
            - maven-repo-v1-{{ checksum "pom.xml" }}
            - maven-repo-v1-
      - run:
          name: Update permissions
          command: sudo chown -R circleci /usr/local/lib/node_modules
      - run:
          name: Build
          command: node .circleci/ci/build.js # this is important, since this is used during UI test run too
      - save_cache:
          paths:
            - ~/.m2
          key: maven-repo-v2-{{ .Branch }}-{{ checksum "pom.xml" }}
      - persist_to_workspace:
          root: /home/circleci/build
          paths:
            - configuration.json
            - bundles/core/target
            - bundles/af-core/target
            - ui.apps/target/*.zip
            - ui.af.apps/target/*.zip
            - examples/ui.apps/target/*.zip
            - examples/ui.content/target/*.zip
            - examples/core/target
            - it/core/target/*.jar
            - it/apps/target/*.zip
            - it/content/target/*.zip
            - it/config/target/*.zip
            - jsdocs/target/jsapi
            - ui.tests/test-module/node_modules
      - store_test_results:
          path: bundles/core/target/surefire-reports
      - store_artifacts:
          path: bundles/core/target/surefire-reports
      - codecov/upload:
          conf: .circleci/codecov.yml
          flags: unittests

  cypress-chrome-cloudready-with-addon:
    executor: test_executor_cloudready
    environment:
      AEM: addon
      TYPE: cypress
      BROWSER: chrome
      PRERELEASE: 'true'
    resource_class: xlarge
    working_directory: /home/circleci/build
    parallelism: 8
    <<: *cypress_test_steps

  cypress-chrome-cloudready-with-latest-addon:
    executor: test_executor_cloudready
    environment:
      AEM: addon-latest
      TYPE: cypress
      BROWSER: chrome
      PRERELEASE: 'true'
      FT: 'true'
    resource_class: xlarge
    working_directory: /home/circleci/build
    parallelism: 8
    <<: *cypress_test_steps

  cypress-chrome-cloudready-with-latest-addon-without-ft:
    executor: test_executor_cloudready
    environment:
      AEM: addon-latest
      TYPE: cypress
      BROWSER: chrome
      PRERELEASE: 'true'
      FT: 'false'
    resource_class: xlarge
    working_directory: /home/circleci/build
    parallelism: 8
    <<: *cypress_test_steps

  jsdocs-deploy:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/build
      - run:
          # since js docs can have folders with "_" prefix
          name: Disable jekyll builds
          command: touch jsdocs/target/jsapi/.nojekyll
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ci-build@aemforms"
            git config user.name "ci-build"
      - add_ssh_keys:
          fingerprints:
            - "ba:61:80:74:5e:67:7e:ee:15:4c:5d:58:8a:47:12:05"
      - run:
          name: Deploy jsdocs to gh-pages branch
          command: gh-pages --dotfiles --message "[skip ci] jsdoc updates" --dist jsdocs/target/jsapi/

  release:
    executor: forms_executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - maven-repo-v1-{{ checksum "pom.xml" }}
            - maven-repo-v1-
      - run:
          name: Update permissions
          command: sudo chown -R circleci /usr/local/lib/node_modules
      - run:
          name: Release
          # Only performs a 'mvn deploy' after the 'mvn release:prepare' because circleCI
          # already checks out the git tag like 'mvn release:perform' would do.
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> /home/circleci/.npmrc
            echo $GPG_PRIVATE_KEY | base64 --decode | gpg --batch --import
            mvn -B -s /home/circleci/project/.circleci/settings.xml clean deploy -P release-sign-artifacts,cloud,adobe-public -Dskip-it
            rm -rf /home/circleci/.gnupg
            rm -rf /home/circleci/.npmrc
      - run:
          name: Update github with release notes and upload released artifacts
          command: |
            # Extract tag from CIRCLE_TAG environment variable
            TAG=${CIRCLE_TAG}

            # Create the release using GitHub API
            RESPONSE=$(curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "tag_name": "'"$TAG"'",
                "name": "'"$TAG"'",
                "body": "Release notes for version '"$TAG"'"
              }' \
              "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases")

            # Get the upload URL from the response
            UPLOAD_URL=$(echo "$RESPONSE" | jq -r '.upload_url' | sed -e 's/{.*}//')

            # Upload release artifacts
            for ARTIFACT in ./all/target/*.zip; do
              curl -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$ARTIFACT" \
                "$UPLOAD_URL?name=$(basename "$ARTIFACT")"
            done
      - run:
          name: Configure git user name
          command: |
            git config user.email "ci-build@aemforms"
            git config user.name "ci-build"
      - add_ssh_keys:
          fingerprints:
            - "ba:61:80:74:5e:67:7e:ee:15:4c:5d:58:8a:47:12:05"
      - run:
          name: Update VERSIONS.md and README.md with the new released version
          command: |
            echo "CIRCLE_TAG: $CIRCLE_TAG"
            RELEASE_BRANCH=$(git branch --contains ${CIRCLE_TAG} | awk 'FNR==2 {print $1}')

            # Debugging output
            echo "RELEASE_BRANCH: $RELEASE_BRANCH"

            # Checkout branch
            git checkout $RELEASE_BRANCH

            # Retrieve the branch name
            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

            # Debugging output
            echo "BRANCH_NAME: $BRANCH_NAME"

            # Find the last two tags on the branch
            LAST_TWO_TAGS=$(git tag -l --sort=-v:refname "core-forms-components-reactor-*" | head -n 2)
            # Debugging output
            echo "LAST_TWO_TAGS: $LAST_TWO_TAGS"

            # Extract the last released from the output
            LAST_TAG=$(echo "$LAST_TWO_TAGS" | tail -n 1)
            # Debugging output
            echo "LAST_TAG: $LAST_TAG"

            # If there is no previous release, use an empty string
            if [[ -z "$LAST_TAG" ]]; then
              LAST_TAG=""
            fi

            # Fetch the new version
            NEW_VERSION=$(echo ${CIRCLE_TAG} | sed 's/^core-forms-components-reactor-//')
            # Debugging output
            echo "NEW_VERSION: $NEW_VERSION"

            # Fetch the last released version
            LAST_VERSION=$(echo "${LAST_TAG}" | sed 's/core-forms-components-reactor-//')
            # Debugging output
            echo "LAST_VERSION: $LAST_VERSION"

            # Fetch the wcm core component version
            WCM_CORE_COMPONENTS_VERSION=$(mvn help:evaluate -Dexpression=core.wcm.components.version -q -DforceStdout)
            # Debugging output
            echo "WCM_CORE_COMPONENTS_VERSION: $WCM_CORE_COMPONENTS_VERSION"

            echo "Before sed: $(cat VERSIONS.md)"
            # update versions.md
            sed -i "/$LAST_VERSION/ { p; b; }; 1,/$LAST_VERSION/ { p; d; }" VERSIONS.md
            sed -i -E "0,/(\| $LAST_VERSION\s*\|) [0-9]+\.[0-9]+\.[0-9]+\s*\|/s//| $NEW_VERSION                \| $WCM_CORE_COMPONENTS_VERSION             |/" VERSIONS.md
            echo "After sed: $(cat VERSIONS.md)"

            echo "Before sed: $(cat README.md)"
            # update readme.md
            sed -i -E "s/(\| $LAST_VERSION\s*\|) [0-9]+\.[0-9]+\.[0-9]+ \s*\| /| $NEW_VERSION                | $WCM_CORE_COMPONENTS_VERSION             | /g" README.md
            echo "After sed: $(cat README.md)"

            # Check if package-lock.json is modified
            if [[ $(git status --porcelain | grep "package-lock.json") ]]; then
              # Discard the changes to package-lock.json (if needed)
              git checkout -- '**/package-lock.json'
            fi

            git add VERSIONS.md README.md
            git commit -m "Update VERSIONS.md and README.md to include version ${NEW_VERSION}"
            git push origin $RELEASE_BRANCH


workflows:
  version: 2
  build-and-release:
    jobs:
      - build-java-11:
          filters:
            tags:
              only: /.*/
      - cypress-chrome-cloudready-with-addon:
          filters:
            tags:
              only: /.*/
          requires:
            - build-java-11
      - cypress-chrome-cloudready-with-latest-addon:
          filters:
            tags:
              only: /.*/
          requires:
            - build-java-11
      - cypress-chrome-cloudready-with-latest-addon-without-ft:
          filters:
            tags:
              only: /.*/
          requires:
            - build-java-11
      - jsdocs-deploy:
          requires:
            - build-java-11
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^core-forms-components-reactor-\d+\.\d+\.\d+$/
      - release:
          requires:
            - build-java-11
            - jsdocs-deploy
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^core-forms-components-reactor-\d+\.\d+\.\d+$/
