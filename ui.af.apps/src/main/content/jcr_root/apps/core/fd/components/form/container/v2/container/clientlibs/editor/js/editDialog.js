/*******************************************************************************
 * Copyright 2022 Adobe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
(function($, Granite) {
    "use strict";

    var EDIT_DIALOG = ".cmp-adaptiveform-container__editdialog",
        DOR_SELECTOR = EDIT_DIALOG + " .cmp-adaptiveform-container__dortypeselector",
        DOR_TEMPLATE_REF_FIELD = EDIT_DIALOG + " .cmp-adaptiveform-container__dortemplateref",
        DOR_DOWNLOAD_BUTTON = EDIT_DIALOG + " .cmp-adaptiveform-container__downloaddor",
        AUTO_GENERATE_DOR_FIELD = EDIT_DIALOG + " .cmp-adaptiveform-container__autogeneratedor",
        DOR_TYPE_FIELD = "[name='./dorType']",
        Utils = window.CQ.FormsCoreComponents.Utils.v1;

    // Constants for DOR selection types
    var DOR_NONE = "none";
    var DOR_SELECT = "select";
    var DOR_GENERATE = "generate";

    // Helper function to manage dorTemplateRef@Delete field
    function manageDorTemplateRefDelete(dialog, shouldDelete) {
        var deleteField = dialog.find('input[name="./dorTemplateRef@Delete"]');
        var dorTemplateRefField = dialog.find('input[name="./dorTemplateRef"]');
        if (shouldDelete) {
            if (deleteField.length === 0) {
                // Create the @Delete field if it doesn't exist
                var deleteInput = $('<input>', {
                    type: 'hidden',
                    name: './dorTemplateRef@Delete',
                    value: ''
                });
                dialog.find('form').append(deleteInput);
            }
        } else {
            // Remove the @Delete field
            deleteField.remove();
            // todo: fix this code
            dorTemplateRefField.remove();
        }
    }

    // Helper function to update UI based on DOR type selection
    function updateDorUIBasedOnSelection(dialog, selectedValue, dorTemplateRefField, autoGenerateDorField, dorDownloadButton) {
        if (selectedValue === DOR_SELECT) {
            dorTemplateRefField.show();
            autoGenerateDorField.attr('hidden', true);
            manageDorTemplateRefDelete(dialog, false);
        } else if (selectedValue === DOR_GENERATE) {
            dorTemplateRefField.hide();
            autoGenerateDorField.removeAttr('hidden');
            manageDorTemplateRefDelete(dialog, false);
        } else {
            // DOR_NONE
            dorTemplateRefField.hide();
            autoGenerateDorField.attr('hidden', true);
            // Clear the field value only when "None" is selected
            var templateRefInput = dorTemplateRefField.find('input[name="./dorTemplateRef"]')[0];
            if (templateRefInput) {
                templateRefInput.value = "";
            }
            manageDorTemplateRefDelete(dialog, true);
        }

        // Show/hide download button based on selection
        if (selectedValue === DOR_NONE) {
            dorDownloadButton.hide();
        } else {
            dorDownloadButton.show();
        }
    }

    function handleDorTypeSelection(dialog) {
        var dorTypeSelector = dialog.find(DOR_SELECTOR)[0];
        var dorTemplateRefField = dialog.find(DOR_TEMPLATE_REF_FIELD);
        var dorDownloadButton = dialog.find(DOR_DOWNLOAD_BUTTON);
        var autoGenerateDorField = dialog.find(AUTO_GENERATE_DOR_FIELD);
        
        if (!dorTypeSelector) {
            return;
        }

        // Initialize DOR type from stored value, default to "none" if not set
        var dorTypeField = dialog.find(DOR_TYPE_FIELD)[0];
        var initialValue = (dorTypeField && dorTypeField.value) ? dorTypeField.value : DOR_NONE;
        
        // Set default value if not already set
        if (dorTypeField && !dorTypeField.value) {
            dorTypeField.value = DOR_NONE;
        }
        
        // Check the appropriate radio button
        var radioButton = dorTypeSelector.querySelector('input[value="' + initialValue + '"]');
        if (radioButton) {
            radioButton.checked = true;
        }

        // Handle DOR type selection change
        dorTypeSelector.addEventListener("change", function(event) {
            var selectedValue = event.target.value;
            var dorTypeField = dialog.find(DOR_TYPE_FIELD)[0];
            if (dorTypeField) {
                dorTypeField.value = selectedValue;
            }
            updateDorUIBasedOnSelection(dialog, selectedValue, dorTemplateRefField, autoGenerateDorField, dorDownloadButton);
        });

        // Initialize visibility based on current selection
        var selectedRadio = dorTypeSelector.querySelector('input:checked');
        if (selectedRadio) {
            updateDorUIBasedOnSelection(dialog, selectedRadio.value, dorTemplateRefField, autoGenerateDorField, dorDownloadButton);
        }
    }

    function handleDownloadDor(dialog) {
        var downloadButton = dialog.find(DOR_DOWNLOAD_BUTTON)[0];
        var downloadClicked = false;
        
        // Store initial values of auto-generate fields to detect changes
        var autoGenerateDorField = dialog.find(AUTO_GENERATE_DOR_FIELD);
        var initialDorName = autoGenerateDorField.find('input[name="./autoDorName"]').val() || '';
        var initialDorTitle = autoGenerateDorField.find('input[name="./autoDorTitle"]').val() || '';
        var initialDorPath = autoGenerateDorField.find('input[name="./autoDorPath"]').val() || '';
        
        if (downloadButton) {
            var performDownload = function(event, isAutoDownload) {
                if (event) {
                    event.preventDefault();
                }
                downloadClicked = true;
                
                var formPath = dialog.find("form").attr("action").replace("_jcr_content", "jcr:content");
                
                // AJAX implementation
                var downloadUrl = Granite.HTTP.externalize('/libs/fd/fm/content/basemanage.json?func=downloadDOR&formPath=' + encodeURIComponent(formPath));
                
                // Check if "generate" is selected and add autoGenerateDor fields to URL
                var dorTypeField = dialog.find(DOR_TYPE_FIELD)[0];
                if (dorTypeField && dorTypeField.value === DOR_GENERATE) {
                    var autoGenerateDorField = dialog.find(AUTO_GENERATE_DOR_FIELD);
                    var dorName = autoGenerateDorField.find('input[name="./autoDorName"]').val();
                    var dorTitle = autoGenerateDorField.find('input[name="./autoDorTitle"]').val();
                    var dorPath = autoGenerateDorField.find('input[name="./autoDorPath"]').val();
                    
                    if (dorName) downloadUrl += '&name=' + encodeURIComponent(dorName);
                    if (dorTitle) downloadUrl += '&title=' + encodeURIComponent(dorTitle);
                    if (dorPath) downloadUrl += '&path=' + encodeURIComponent(dorPath);
                }
                
                var onDownloadDoRSuccess = function(result) {
                     // For "generate", don't mark for deletion, just hide
                    manageDorTemplateRefDelete(dialog,false);
                    // Only download to browser if it's a manual download (not auto-download)
                    if (!isAutoDownload) {
                        if (result && result.doRPath) {
                            var url = result.doRPath;
                            var a = document.createElement('a');
                            a.href = url;
                            a.download = 'dorTemplate.xdp';
                            document.body.appendChild(a);
                            a.click();
                            document.body.removeChild(a);

                        } else {
                            // Show error modal
                            var errorModal = new Coral.Alert();
                            errorModal.variant = "error";
                            errorModal.innerHTML = Granite.I18n.get("Error in downloading the Document of Record Template");
                            document.body.appendChild(errorModal);
                            errorModal.show();
                        }
                    }
                };
                var onDownloadDorFailure = function(error) {
                    // Show error message
                    var errorAlert = new Coral.Alert();
                    errorAlert.variant = "error";
                    errorAlert.innerHTML = Granite.I18n.get("Download Document of Record") + ": " + (error.message || error);
                    document.body.appendChild(errorAlert);
                    errorAlert.show();
                };
                
                $.ajax({
                    type: 'POST',
                    url: downloadUrl,
                    data: {_charset_: "UTF-8"},
                    success: onDownloadDoRSuccess,
                    error: onDownloadDorFailure
                });
            };
            
            downloadButton.addEventListener("click", performDownload);
            
            // Store the performDownload function and downloadClicked flag on the dialog for access in handleDialogSubmit
            dialog.data('performDownload', performDownload);
            dialog.data('downloadClicked', function() { return downloadClicked; });
            dialog.data('initialDorName', initialDorName);
            dialog.data('initialDorTitle', initialDorTitle);
            dialog.data('initialDorPath', initialDorPath);
        }
    }

    function handleDialogSubmit(dialog) {
        var form = dialog.find("form");
        var performDownload = dialog.data('performDownload');
        var getDownloadClicked = dialog.data('downloadClicked');
        
        if (form.length && performDownload) {
            form.on("submit", function(event) {
                var dorTypeField = dialog.find(DOR_TYPE_FIELD)[0];
                
                // Check if auto-generate fields have changed
                var autoGenerateDorField = dialog.find(AUTO_GENERATE_DOR_FIELD);
                var currentDorName = autoGenerateDorField.find('input[name="./autoDorName"]').val() || '';
                var currentDorTitle = autoGenerateDorField.find('input[name="./autoDorTitle"]').val() || '';
                var currentDorPath = autoGenerateDorField.find('input[name="./autoDorPath"]').val() || '';
                
                var initialDorName = dialog.data('initialDorName') || '';
                var initialDorTitle = dialog.data('initialDorTitle') || '';
                var initialDorPath = dialog.data('initialDorPath') || '';
                
                var autoDorFieldsChanged = (currentDorName !== initialDorName) || 
                                          (currentDorTitle !== initialDorTitle) || 
                                          (currentDorPath !== initialDorPath);
                
                // Auto-download if: dorType is generate, download wasn't clicked, and (no existing template OR auto-dor fields changed)
                if (dorTypeField && dorTypeField.value === DOR_GENERATE && !getDownloadClicked() && (autoDorFieldsChanged)) {
                    event.preventDefault();
                    performDownload(null, true); // true indicates auto-download
                    // Submit the form after a short delay to allow download to initiate
                    setTimeout(function() {
                        form.off("submit");
                        form.submit();
                    }, 100);
                }
            });
        }
    }

    Utils.initializeEditDialog(EDIT_DIALOG)(handleDorTypeSelection, handleDownloadDor, handleDialogSubmit);

})(jQuery, Granite);